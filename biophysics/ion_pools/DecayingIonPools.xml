<?xml version="1.0" encoding="UTF-8"?>
<NineML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://nineml.net/9ML/1.0"
  xsi:schemaLocation="http://nineml.incf.org/9ML/NineML_v0.3.xsd">
  <Dimension name="per_time" t="-1"/>
  <Dimension name="voltage" m="1" l="2" t="-3" i="-1"/>  
  <Dimension name="temperature" k="1"/>
  <Dimension name="conductanceDensity" m="-1" l="-4" t="3" i="2"/>
  <Dimension name="currentDensity" i="1" l="-2"/>
  <Dimension name="concentration" l="-3" n="1"/>
  <Dimension name="dimensionless"/>
  <Dynamics name="DecayingIonPools">
    <Parameter name="diameter" dimension="length"/>
    <Parameter name="steadyStateInternal" dimension="concentration"/>
    <Parameter name="steadyStateExternal" dimension="concentration"/>
    <Parameter name="ionValence" dimension="dimensionless"/>
    <Parameter name="beta" dimension="per_time"/>    
    <AnalogReceivePort name="temperature" dimension="temperature"/>
    <AnalogReceivePort name="g" dimension="conductanceDensity"/>
    <AnalogSendPort name="i" dimension="currentDensity"/>
    
      <StateVariable name="internalC" dimension="dimensionless">
        <Initial>steadyStateInternal</Initial>
      </StateVariable>
      <StateVariable name="externalC" dimension="dimensionless">
        <Initial>steadyStateExternal</Initial>
      </StateVariable>
      <Alias name="i">
        g * (v - e_reversal)
      </Alias>
      <Regime name="default">
        <TimeDerivative variable="internalC">
          <MathInline>
            -i / (ionValence * Faraday * diameter) - 
            beta * (internalC - steadyStateInternal)
          </MathInline>
        </TimeDerivative>
        <TimeDerivative variable="externalC">
          <MathInline>
            i / (ionValence * Faraday * diameter) -  
            beta * (externalC - steadyStateExternal)
          </MathInline>
        </TimeDerivative>
      </Regime>
      <Alias name="e_reversal">
        <MathML xmlns="http://www.w3.org/1998/Math/MathML">
          <piecewise>
            <piece>
              <ci>nerstLowerLimit</ci>
              <apply><leq/><ci>externalC</ci><ci>zeroC</ci></apply>
            </piece>            
            <piece>
              <ci>nerstUpperLimit</ci>
              <apply>
                <and/>
                <apply><leq/><ci>internalC</ci><ci>zeroC</ci></apply>
                <apply><gt/><ci>externalC</ci><ci>zeroC</ci></apply>
              </apply>
            </piece>
            <otherwise>
              <ci>nerstPotential</ci>
            </otherwise>
          </piecewise>
        </MathML>
      </Alias>
      <Alias name="nernstPotential">
        <MathInline>  
          log(externalC / internalC) * UniversalGasConstant * 
          (temperature - AbsoluteZero) / (Faraday * KValence)
        </MathInline>
      </Alias>
      <Alias name="Faraday">
        <Value units="C/mol">96485.309</Value>
      </Alias>
      <Alias name="UniversalGasConstant">
        <Value units="J/(K * mol)">8.314472</Value>
      </Alias>
      <Alias name="AbsoluteZero">
        <Value units="K">âˆ’273.15</Value>
      </Alias>
      <Alias name="KValence">
        <Value>1</Value>
      </Alias>
      <Alias name="zeroC">
        <Value units="mM">0.0</Value>
      </Alias>            
      <Alias name="nernstLowerLimit">
        <Value units="mV">-1e6</Value>
      </Alias>      
      <Alias name="nernstUpperLimit">
        <Value units="mV">1e6</Value>
      </Alias>
    </Dynamics>
</NineML>
