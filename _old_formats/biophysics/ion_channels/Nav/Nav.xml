<?xml version="1.0" encoding="UTF-8"?>
<NineML xmlns="http://nineml.net/9ML/1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://nineml.net/9ML/1.0../NineML_h0.3.xsd">
  <Dimension name="per_time" t="-1"/>
  <Dimension name="voltage" m="1" l="2" t="-3" i="-1"/>  
  <Dimension name="temperature" k="1"/>
  <Dimension name="conductanceDensity" m="-1" l="-4" t="3" i="2"/>
  <Dimension name="temperature" k="1"/>
  <Dimension name="currentDensity" i="1" l="-2"/>
  <ComponentClass name="NavNernst" xmlns="http://nineml.net/9ML/1.0">
    <Parameter name="gbar" dimension="conductanceDensity"/>
    <Parameter name="Aalpha_m" dimension="per_time"/>
    <Parameter name="Kalpha_m" dimension="voltage"/>
    <Parameter name="V0alpha_m" dimension="voltage"/>
    <Parameter name="Abeta_m" dimension="per_time"/>
    <Parameter name="Kbeta_m" dimension="voltage"/>
    <Parameter name="V0beta_m" dimension="voltage"/>
    <Parameter name="Aalpha_h" dimension="per_time"/>
    <Parameter name="Kalpha_h" dimension="voltage"/>
    <Parameter name="V0alpha_h" dimension="voltage"/>
    <Parameter name="Abeta_h" dimension="per_time"/>
    <Parameter name="Kbeta_h" dimension="voltage"/>
    <Parameter name="V0beta_h" dimension="voltage"/>
    <AnalogReceivePort name="temperature" dimension="temperature"/>
    <AnalogReceivePort name="v" dimension="voltage"/>
    <AnalogSendPort name="g" dimension="conductanceDensity"/>
    
      <StateVariable name="m">
        <Initial>m_inf</Initial>
      </StateVariable>
      <StateVariable name="h">
        <Initial>h_inf</Initial>
      </StateVariable>
      <Regime>
        <TimeDerivative variable="m">
          <MathInline>(m_inf - m) / m_tau</MathInline>
        </TimeDerivative>
        <TimeDerivative variable="h">
          <MathInline>(h_inf - h) / h_tau</MathInline>
        </TimeDerivative>
      </Regime>
      <Alias name="g">
        <MathInline>gbar * m * m * m * h</MathInline>
      </Alias>
      <Alias name="linoid_test">
        <MathInline>abs((v - V0alpha_m) / Kalpha_m)</MathInline>
      </Alias>
      <Alias name="linoid_bounded">
        <MathInline>Kalpha_m * (1 - ((v - V0alpha_m) / Kalpha_m) /
          2)</MathInline>
      </Alias>
      <Alias name="linoid_unbounded">
        <MathInline>(v - V0alpha_m) / (1 - exp((v - V0alpha_m) /
          Kalpha_m))</MathInline>
      </Alias>
      <Alias name="linoid_voltage_bound">
        <Value>1e-6</Value>
      </Alias>
      <Alias name="linoid">
        <MathML xmlns="http://www.w3.org/1998/Math/MathML">
          <piecewise>
            <piece>
              <ci>linoid_bounded</ci>
              <apply>
                <lt/>
                <ci>linoid_test</ci>
                <ci>linoid_voltage_bound</ci>
              </apply>
            </piece>
            <otherwise>
              <ci>linoid_unbounded</ci>
            </otherwise>
          </piecewise>
        </MathML>
      </Alias>
      <Alias name="Q10">
        <MathInline>pow(3, (temperature - 20) / 10)</MathInline>
      </Alias>
      <Alias name="alpha_m">
        <MathInline>Q10 * Aalpha_m * linoid</MathInline>
      </Alias>
      <Alias name="beta_m">
        <MathInline>Q10 * Abeta_m * exp((v - V0beta_m) /
          Kbeta_m)</MathInline>
      </Alias>
      <Alias name="alpha_h">
        <MathInline>Q10 * Aalpha_h * exp((v - V0alpha_h) /
          Kalpha_h)</MathInline>
      </Alias>
      <Alias name="beta_h">
        <MathInline>Q10 * Abeta_h / (1 + exp((v - V0beta_h) /
          Kbeta_h))</MathInline>
      </Alias>
      <Alias name="m_inf">
        <MathInline>alpha_m / (alpha_m + beta_m)</MathInline>
      </Alias>
      <Alias name="tau_m">
        <MathInline>1 / (alpha_m + beta_m)</MathInline>
      </Alias>
      <Alias name="h_inf">
        <MathInline>alpha_h / (alpha_h + beta_h)</MathInline>
      </Alias>
      <Alias name="tau_h">
        <MathInline>1 / (alpha_h + beta_h)</MathInline>
      </Alias>
    </Dynamics>
  </ComponentClass>
</NineML>
