<?xml version="1.0" encoding="UTF-8"?>
<NineML xmlns="http://nineml.net/9ML/1.0">
  <Dimension name="per_time" t="-1"/>
  <Dimension name="voltage" m="1" l="2" t="-3" i="-1"/>
  <Dimension name="per_time_voltage" m="-1" l="-2" t="2" i="1"/>
  <Dimension name="conductance" m="-1" l="-2" t="3" i="2"/>
  <Dimension name="capacitance" m="-1" l="-2" t="4" i="2"/>
  <Dimension name="current" i="1"/>
  <Dimension name="currentDensity" i="1" l="-2"/>
  <Dimension name="temperature" k="1"/>
  <Dimension name="dimensionless"/>
  <Unit symbol="K" dimension="temperature" power="0"/>
  <Dynamics name="HodgkinHuxley">
    <Annotations>
      <Description>This class is a </Description></Annotations>
    <Parameter name="m_alpha_A" dimension="per_time_voltage"/>
    <Parameter name="m_alpha_V0" dimension="voltage"/>
    <Parameter name="m_alpha_K" dimension="voltage"/>
    <Parameter name="m_beta_A" dimension="per_time"/>
    <Parameter name="m_beta_V0" dimension="voltage"/>
    <Parameter name="m_beta_K" dimension="voltage"/>
    <Parameter name="h_alpha_A" dimension="per_time"/>
    <Parameter name="h_alpha_V0" dimension="voltage"/>
    <Parameter name="h_alpha_K" dimension="voltage"/>
    <Parameter name="h_beta_A" dimension="per_time"/>
    <Parameter name="h_beta_V0" dimension="voltage"/>
    <Parameter name="h_beta_K" dimension="voltage"/>
    <Parameter name="n_alpha_A" dimension="per_time_voltage"/>
    <Parameter name="n_alpha_V0" dimension="voltage"/>
    <Parameter name="n_alpha_K" dimension="voltage"/>
    <Parameter name="n_beta_A" dimension="per_time"/>
    <Parameter name="n_beta_V0" dimension="voltage"/>
    <Parameter name="n_beta_K" dimension="voltage"/>
    <Parameter name="gbarNa" dimension="conductance"/>
    <Parameter name="gbarK" dimension="conductance"/>
    <Parameter name="gLeak" dimension="conductance"/>
    <Parameter name="eLeak" dimension="voltage"/>
    <Parameter name="eK" dimension="voltage"/>
    <Parameter name="eNa" dimension="voltage"/>
    <Parameter name="C" dimension="capacitance"/>
    <Parameter name="T" dimension="temperature"/>
    <Parameter name="thresh" dimension="voltage"/>
    <AnalogReducePort name="iExt" dimension="current" operator="+"/>
    <EventSendPort name="outgoingSpike"/>
    <StateVariable name="v" dimension="voltage"/>
    <StateVariable name="m" dimension="dimensionless"/>
    <StateVariable name="h" dimension="dimensionless"/>
    <StateVariable name="n" dimension="dimensionless"/>
    <Regime name="default">
      <TimeDerivative variable="v">
        <MathInline>(iNa + iK + iLeak + iExt) / C</MathInline>
      </TimeDerivative>
      <TimeDerivative variable="m">
        <MathInline>(m_inf - m) / m_tau</MathInline>
      </TimeDerivative>
      <TimeDerivative variable="h">
        <MathInline>(h_inf - h) / h_tau</MathInline>
      </TimeDerivative>
      <TimeDerivative variable="n">
        <MathInline>(n_inf - n) / n_tau</MathInline>
        <Annotations><Description>And time-derivatives too</Description></Annotations>
      </TimeDerivative>
      <OnCondition target_regime="default">
        <Trigger>
          <MathInline>v &gt; thresh</MathInline>
        </Trigger>
        <OutputEvent port="outgoingSpike"/>
      </OnCondition>
    </Regime>
    <Alias name="iK">
      <MathInline>gbarK * n * n * n * n * (v - eK)</MathInline>
    </Alias>
    <Alias name="iNa">
      <MathInline>gbarNa * m * m * m * h * (v - eNa)</MathInline>
    </Alias>
    <Alias name="iLeak">
      <MathInline>gLeak * (v - eLeak)</MathInline>
    </Alias>
    <Alias name="m_inf">
      <MathInline>m_alpha / (m_alpha + m_beta)</MathInline>
    </Alias>
    <Alias name="m_tau">
      <MathInline>1.0 / (m_alpha + m_beta)</MathInline>
    </Alias>
    <Alias name="h_inf">
      <MathInline>h_alpha / (h_alpha + h_beta)</MathInline>
    </Alias>
    <Alias name="h_tau">
      <MathInline>1.0 / (h_alpha + h_beta) * T / temperature_reference</MathInline>
    </Alias>
    <Alias name="n_inf">
      <MathInline>n_alpha / (n_alpha + n_beta)</MathInline>
    </Alias>
    <Alias name="n_tau">
      <MathInline>1.0 / (n_alpha + n_beta)</MathInline>
    </Alias>      
    <Alias name="m_alpha">
      <MathInline>m_alpha_A * (v - m_alpha_V0) / (1.0 - exp(-(v - m_alpha_V0) / m_alpha_K))</MathInline>
    </Alias>
    <Alias name="m_beta">
      <MathInline>m_beta_A * exp(-(v - m_beta_V0) / m_beta_K)</MathInline>
    </Alias>
    <Alias name="h_alpha">
      <MathInline>h_alpha_A * exp(-(v - h_alpha_V0) / h_alpha_K)</MathInline>
    </Alias>
    <Alias name="h_beta">
      <MathInline>h_beta_A / (1.0 + exp (-(v - h_beta_V0) / h_beta_K))</MathInline>
    </Alias>
    <Alias name="n_alpha">
      <MathInline>n_alpha_A * (v - n_alpha_V0) / (1 - exp(-(v - n_alpha_V0) / n_alpha_K))</MathInline>
    </Alias>
    <Alias name="n_beta">
      <MathInline>n_beta_A * exp(-(v - n_beta_V0) / n_beta_K)</MathInline>
    </Alias>
    <Constant name="temperature_reference" value="300" units="K"/>
  </Dynamics>
</NineML>
